name: Pull Copilot Prompts

on:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at 12 AM
  workflow_dispatch:  # Allow manual triggering

env:
  BRANCH_NAME: update/copilot-prompts
  COMMIT_MESSAGE: 'Update Copilot prompts from publisher repository'
  PR_TITLE: 'Update Copilot prompts'
  PR_BODY: 'This PR updates the Copilot prompts from the publisher repository.'

jobs:
  sync-prompts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout destination repository
        uses: actions/checkout@v4

      - name: Clone source repository
        run: |
          git clone https://${{ secrets.PAT }}@${{ vars.PUBLISHER_GIT_URL }} source-repo

      - name: Check for changes
        id: check-changes
        run: |
          # Create .github directory if it doesn't exist
          mkdir -p .github

          # Initialize changes flag
          changes_detected=false

          # Copy and compare files
          cd source-repo
          for file in $(find .github -name "*.md" -type f 2>/dev/null); do
            target_file="../$file"
            target_dir=$(dirname "../$file")
            
            # Create target directory if it doesn't exist
            mkdir -p "$target_dir"
            
            if [ ! -f "$target_file" ] || ! cmp -s "$file" "$target_file"; then
              changes_detected=true
              break
            fi
          done
          cd ..

          # Set output
          echo "changes_detected=$changes_detected" >> $GITHUB_OUTPUT

      - name: No changes detected
        if: steps.check-changes.outputs.changes_detected != 'true'
        run: echo "No changes detected in Copilot prompts. Workflow completed."

      - name: Create branch and copy files
        if: steps.check-changes.outputs.changes_detected == 'true'
        run: |
          # Create and checkout new branch
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b ${{ env.BRANCH_NAME }}

          # Copy all .md files from source
          cd source-repo
          find .github -name "*.md" -type f -exec cp --parents {} ../ \;
          cd ..

          # Stage, commit and push changes
          git add .github/
          git commit -m "${{ env.COMMIT_MESSAGE }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.check-changes.outputs.changes_detected == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            await github.rest.pulls.create({
              owner,
              repo,
              title: process.env.PR_TITLE,
              body: process.env.PR_BODY,
              head: process.env.BRANCH_NAME,
              base: 'main'
            });
