name: Pull Copilot Prompts

on:
  schedule:
    - cron: '0 12 * * 1'  # Every Monday at 12:00 PM UTC
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

env:
  BRANCH_NAME: update/copilot-prompts-${{ github.run_number }}
  COMMIT_MESSAGE: 'Update Copilot prompts from publisher repository [skip ci]'
  PR_TITLE: '📚 Update Copilot prompts from publisher'
  PR_BODY: |
    This PR updates Copilot prompts from the publisher repository.
    - Source: ${{ vars.PUBLISHER_GIT_URL }}
    - Updated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    ${{ inputs.force_sync && '- Note: This is a forced sync' || '' }}

jobs:
  sync-prompts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout destination repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}  # Use PAT instead of GITHUB_TOKEN
          fetch-depth: 1  # Shallow clone for better performance

      - name: Clone and process source repository
        id: sync
        run: |
          # Prepare repository URL with PAT
          REPO_URL="${{ vars.PUBLISHER_GIT_URL }}"
          REPO_URL=$(echo "$REPO_URL" | sed -E "s#^(https?://)?#https://${{ secrets.PAT }}@#")
          
          # Clone source repository with exponential backoff retry logic
          max_attempts=3
          for ((i=1; i<=max_attempts; i++)); do
            echo "Attempt $i of $max_attempts to clone repository"
            if git clone --depth 1 "$REPO_URL" source-repo; then
              echo "Successfully cloned repository on attempt $i"
              break
            fi
            rm -rf source-repo
            if [ $i -eq $max_attempts ]; then
              echo "::error::Failed to clone repository after $max_attempts attempts"
              exit 1
            fi
            sleep_time=$((2 ** (i - 1) * 5))
            echo "Retrying in $sleep_time seconds..."
            sleep $sleep_time
          done

          # Process markdown files
          mkdir -p .github
          changes_detected=false
          file_count=0
          
          if [ -d "source-repo/.github" ]; then
            cd source-repo
            for file in $(find .github -name "*.md" -type f); do
              mkdir -p "../$(dirname "$file")"
              if [ ! -f "../$file" ] || ! cmp -s "$file" "../$file"; then
                cp --parents "$file" ../
                changes_detected=true
                echo "::notice::Changed or added: $file"
                file_count=$((file_count + 1))
              fi
            done
            cd ..
            
            if [ "$file_count" -gt 0 ]; then
              echo "Found $file_count changed or new files"
            else
              echo "No changes detected in any markdown files"
            fi
          else
            echo "::warning::Source repository does not contain a .github directory"
          fi
          
          # Clean up
          rm -rf source-repo
          
          # Handle force sync option
          if [ "${{ inputs.force_sync }}" == "true" ]; then
            changes_detected=true
            echo "::notice::Force sync enabled - will create PR regardless of changes"
          fi
          
          echo "changes_detected=$changes_detected" >> $GITHUB_OUTPUT

      - name: Skip message
        if: steps.sync.outputs.changes_detected != 'true'
        run: |
          echo "::notice::No changes detected in the GitHub Copilot Prompt files (*.md). Skipping PR creation."
          echo "# Sync Result: No Changes" >> $GITHUB_STEP_SUMMARY
          echo "No changes detected in the GitHub Copilot Prompt files (*.md). Skipping PR creation." >> $GITHUB_STEP_SUMMARY

      - name: Create PR
        id: create_pr
        if: steps.sync.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT }}  # Use PAT instead of GITHUB_TOKEN
          commit-message: ${{ env.COMMIT_MESSAGE }}${{ inputs.force_sync && ' (forced sync)' || '' }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          add-paths: |
            .github
          title: ${{ env.PR_TITLE }}${{ inputs.force_sync && ' (forced)' || '' }}
          body: ${{ env.PR_BODY }}
          delete-branch: true
      
      - name: PR Summary
        if: steps.sync.outputs.changes_detected == 'true'
        run: |
          if [ "${{ steps.create_pr.outputs.pull-request-number }}" ]; then
            echo "::notice::Created Pull Request #${{ steps.create_pr.outputs.pull-request-number }}"
            echo "# Sync Result: PR Created ✅" >> $GITHUB_STEP_SUMMARY
            echo "Created Pull Request [#${{ steps.create_pr.outputs.pull-request-number }}](${{ steps.create_pr.outputs.pull-request-url }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "::warning::PR creation did not return a PR number"
            echo "# Sync Result: Possible Issue ⚠️" >> $GITHUB_STEP_SUMMARY
            echo "Changes were detected but no PR number was returned. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
